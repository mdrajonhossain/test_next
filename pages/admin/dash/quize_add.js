import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
const inter = Inter({ subsets: ['latin'] })
import React, { useState, useEffect } from 'react';
import Link from 'next/link'
import Leftdiv from './ass/Leftdiv';
import Topbar from './ass/Topbar';
import { CiBoxList } from "react-icons/ci";
import axios from 'axios';
import Table from 'react-bootstrap/Table';





export default function Quize_add() {
  const [success_message, setSuccess_message] = useState(false);
  const [loadbutton, setLoadbutton] = useState(false)
  const [showtable, setShowtable] = useState(false)

  const [get_success_data, setGet_success_data] = useState([]);

  const [cata_name, setCata_name] = useState([])

  const [input_cata_name, setInput_cata_name] = useState('')
  const [input_question, setInput_question] = useState('')
  const [input_answer, setInput_answer] = useState('')
  const [input_actives, setInput_actives] = useState('')
  const [rar, setRar] = useState([])
  const [addoption_tergatvalue, setAddoption_tergatvalue] = useState('')


  const addoptionquestion_submit = () => {
    if (addoption_tergatvalue) {
      setRar([...rar, addoption_tergatvalue]);
      setAddoption_tergatvalue('');
    }

  }

  const ops = rar.map((dat, index) => {
    return <span className='op_tab' key={index}>{dat}</span>
  })


  useEffect(() => {
    axios.get('/api/get_quize_catagory')
      .then(response => {
        setCata_name(response.data.data)
      })
  }, [])


  function cat_name_hendeler(event) {
    setInput_cata_name(event.target.value);
  }

  function question_hendeler(event) {
    setInput_question(event.target.value);
  }

  function answer_hendeler(event) {
    setInput_answer(event.target.value);
  }

  function active_hendeler(event) {
    setInput_actives(event.target.value);
  }


  async function savequizeadd(e) {
    if (input_cata_name.length != 0 && input_question.length != 0 && rar.length != 0 && input_answer.length != 0 && input_actives.length != 0) {
      setLoadbutton(true)
      const formData = {
        cata_id: input_cata_name,
        question: input_question,
        question_options: rar,
        answer: input_answer,
        actives: input_actives
      }
      await axios.post('/api/add_quize', formData)
        .then(response => {
          setInput_cata_name('')
          setInput_question('')
          setInput_answer('')
          setRar([])
          setAddoption_tergatvalue('')
          setSuccess_message(true)
          setLoadbutton(false)
        })
    } else {
      alert("mistat field")
    }
  }



  async function getdatashow() {

    await axios.get('/api/get_allquize')
      .then(response => {
        setGet_success_data(response.data.data)
      })
  }

  async function dublic_getdatashow() {
    setShowtable(!showtable);
    getdatashow();
  }


  const quize_allowfunct = (data) => {

    const allowsss = data.actives === 0 ? 1 : 0;

    const dataa = {
      "allow": allowsss,
      "_id": data._id
    }
    axios.post('/api/quize_public_allow', dataa)
      .then(response => {
        getdatashow()
      })

  }

  return (
    <>
      <Head>
        <title>Shikhon School-Quize_add</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <main>


        <Topbar />


        <div className="main">
          <div className="left_side">
            <Leftdiv />
          </div>

          {success_message ? <div className='success_message' onClick={() => setSuccess_message(false)}>Quize Catagory Insert Successfully </div> : ' '}
          {loadbutton ? <div className='loadbutton'><div class="loader"></div></div> : ' '}



          <div className="right_side">
            <div className="page_header"><CiBoxList size={28} />&nbsp; Add Quze</div>
            <div className="showdata" onClick={() => dublic_getdatashow()}>&nbsp; Show Data</div>

            <div className={showtable ? 'showdata_table' : 'no_showdata_table'}>
              <div className='main_table'>
                <div className='close_tab' onClick={() => setShowtable(!showtable)}>Close</div>
                <Table className="table">
                  <thead>
                    <tr>
                      <th>SL</th>
                      <th style={{width:'50%'}}>Question</th>
                      <th>Answer</th>
                      <th>Date</th>
                      <th>Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    {get_success_data.map((data, index) => {
                      return (
                        <tr key={index}>
                          <td>{index + 1}</td>
                          <td style={{width:'50%'}}>{data.question}</td>
                          <td>{data.answer}</td>
                          <td>{data.created_at.slice(0, 10)}</td>
                          <td>
                            <button className='quize_cata_delete_btn' onClick={() => quize_allowfunct(data)}>{data.actives === 1 ? "Not Public Allow" : "Public Allow"}</button>
                            <button className='quize_cata_delete_btn'>Delete</button>
                          </td>
                        </tr>
                      )
                    })
                    }
                  </tbody>
                </Table>
              </div>
            </div>


            <label htmlFor="name"> Quize Type (Catagory) : </label>
            <select className="public_allow" onChange={cat_name_hendeler} required="required">
              {cata_name.map((cat_name, index) => {
                return <option key={index} value={cat_name._id}>{cat_name.caname}</option>
              })}
            </select>
            <br />

            <label htmlFor="name"> Quze Question :</label>
            <div className="caname">
              <input type="text" value={input_question} onChange={question_hendeler} id="cata_name" className="cata_name" name="user_name" required="required" />
            </div>


            <label htmlFor="name"> Quze Option :</label>
            <div className='option_border'>{ops}</div>

            <div className="caname">
              <input type="text" id="cata_name" value={addoption_tergatvalue} onChange={(e) => setAddoption_tergatvalue(e.target.value)} className="cata_name" name="user_name" required="required" />
            </div>
            <button className="option_btn" onClick={() => addoptionquestion_submit()}>Add</button>

            <label htmlFor="name"> Quze Answer :</label>
            <div className="caname">
              <input type="text" value={input_answer} onChange={answer_hendeler} id="cata_name" className="cata_name" name="user_name" required="required" />
            </div>

            <label htmlFor="name"> Active : </label>
            <select className="public_allow" onChange={active_hendeler} required="required">
              <option value="0">No</option>
              <option value="1">Yes</option>
            </select>
            <br />

            <button className="catasave" onClick={() => savequizeadd()}>Save</button>

            <br />





          </div>




        </div>
      </main>
    </>
  )
}
